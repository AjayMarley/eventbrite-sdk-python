# -*- coding: utf-8 -*-
"""
Last Generated: 2015-01-12 17:08:59.416601

This module (access_methods.py) is autogenerated from the Eventbrite API
documentation. Any and all changes to this module must be implemented as
p art of that autogeneration. Therefore, we cannot accept any pull requests,
as the next generation of this module will the changes to be overwritten.
"""

class AccessMethodsMixin(object):

    def get_categories(self,  **data):
        """
        GET /categories/

        Returns a list of :format:`category` as ``categories``, including
        subcategories nested.


        
        """
        return self.get("/categories/", data=data)

    def get_category_by_id(self, id,  **data):
        """
        GET /categories/:id/

        Gets a :format:`category` by ID as ``category``.


        
        """
        
        return self.get("/categories/{0}/".format(id), data=data)

    def get_subcategories(self,  **data):
        """
        GET /subcategories/

        Returns a list of :format:`subcategory` as ``subcategories``.


        
        """
        return self.get("/subcategories/", data=data)

    def get_subcategory_by_id(self, id,  **data):
        """
        GET /subcategories/:id/

        Gets a :format:`subcategory` by ID as ``subcategory``.


        
        """
        
        return self.get("/subcategories/{0}/".format(id), data=data)

    def get_formats(self,  **data):
        """
        GET /format/

        Returns a list of :format:`format` as ``formats``.


        
        """
        return self.get("/format/", data=data)

    def get_format_by_id(self, id,  **data):
        """
        GET /format/:id/



        Gets a :format:`format` by ID as ``format``.

        
        """
        
        return self.get("/format/{0}/".format(id), data=data)

    def get_event_by_id(self, id,  event_name_html, event_description_html, event_organizer_id, event_start_utc, event_start_timezone, event_end_utc, event_end_timezone, event_currency, event_venue_id=None, event_online_event=None, event_listed=None, event_logo_id=None, event_category_id=None, event_subcategory_id=None, event_format_id=None, event_shareable=None, event_invite_only=None, event_password=None, event_capacity=None, event_show_remaining=None, **data):
        """
        GET /events/:id/

        Returns an :format:`event` for the specified event.



        :param string event.name.html:  The name of the event
        :param string event.description.html:  The description on the event page
        :param string event.organizer_id:  The ID of the organizer of this event
        :param datetime event.start.utc:  The start time of the event
        :param string event.start.timezone:  Start time timezone (Olson format)
        :param datetime event.end.utc:  The end time of the event
        :param string event.end.timezone:  End time timezone (Olson format)
        :param string event.currency:  Event currency (3 letter code)
        :param string event.venue_id: (optional) The ID of a previously-created venue to associate with this event. You can omit this field or set it to null if you set online_event.
        :param boolean event.online_event: (optional) Is the event online-only (no venue)?
        :param boolean event.listed: (optional) If the event is publicly listed and searchable
        :param string event.logo.id: (optional) The logo for the event
        :param string event.category_id: (optional) The category (vertical) of the event
        :param string event.subcategory_id: (optional) The subcategory of the event (US only)
        :param string event.format_id: (optional) The format (general type) of the event
        :param boolean event.shareable: (optional) If users can share the event on social media
        :param boolean event.invite_only: (optional) Only invited users can see the event page
        :param string event.password: (optional) Password needed to see the event in unlisted mode
        :param integer event.capacity: (optional) Set specific capacity (if omitted, sums ticket capacities)
        :param boolean event.show_remaining: (optional) If the remaining number of tickets is publicly visible on the event page
        
        """
        
        return self.get("/events/{0}/".format(id), data=data)

    def get_events_ticket_classes(self, id,  event_name_html, event_description_html, event_organizer_id, event_start_utc, event_start_timezone, event_end_utc, event_end_timezone, event_currency, event_venue_id=None, event_online_event=None, event_listed=None, event_logo_id=None, event_category_id=None, event_subcategory_id=None, event_format_id=None, event_shareable=None, event_invite_only=None, event_password=None, event_capacity=None, event_show_remaining=None, **data):
        """
        GET /events/:id/ticket_classes/

        Returns a paginated response with a key of ``ticket_classes``,
        containing a list of :format:`ticket_class`.



        :param string event.name.html:  The name of the event
        :param string event.description.html:  The description on the event page
        :param string event.organizer_id:  The ID of the organizer of this event
        :param datetime event.start.utc:  The start time of the event
        :param string event.start.timezone:  Start time timezone (Olson format)
        :param datetime event.end.utc:  The end time of the event
        :param string event.end.timezone:  End time timezone (Olson format)
        :param string event.currency:  Event currency (3 letter code)
        :param string event.venue_id: (optional) The ID of a previously-created venue to associate with this event. You can omit this field or set it to null if you set online_event.
        :param boolean event.online_event: (optional) Is the event online-only (no venue)?
        :param boolean event.listed: (optional) If the event is publicly listed and searchable
        :param string event.logo.id: (optional) The logo for the event
        :param string event.category_id: (optional) The category (vertical) of the event
        :param string event.subcategory_id: (optional) The subcategory of the event (US only)
        :param string event.format_id: (optional) The format (general type) of the event
        :param boolean event.shareable: (optional) If users can share the event on social media
        :param boolean event.invite_only: (optional) Only invited users can see the event page
        :param string event.password: (optional) Password needed to see the event in unlisted mode
        :param integer event.capacity: (optional) Set specific capacity (if omitted, sums ticket capacities)
        :param boolean event.show_remaining: (optional) If the remaining number of tickets is publicly visible on the event page
        
        """
        
        return self.get("/events/{0}/ticket_classes/".format(id), data=data)

    def get_events_ticket_classes(self, id, ticket_class_id,  **data):
        """
        GET /events/:id/ticket_classes/:ticket_class_id/

        Gets and returns a single :format:`ticket_class` by ID, as the key
        ``ticket_class``.



        
        """
        
        return self.get("/events/{0}/ticket_classes/{1}/".format(id,ticket_class_id), data=data)

    def get_events_attendees(self, id,  **data):
        """
        GET /events/:id/attendees/

        Returns a paginated response with a key of ``attendees``, containing a list of :format:`attendee`.


        
        """
        
        return self.get("/events/{0}/attendees/".format(id), data=data)

    def get_events_attendees(self, id, attendee_id,  **data):
        """
        GET /events/:id/attendees/:attendee_id/

        Returns a single :format:`attendee` by ID, as the key ``attendee``.


        
        """
        
        return self.get("/events/{0}/attendees/{1}/".format(id,attendee_id), data=data)

    def get_events_orders(self, id,  **data):
        """
        GET /events/:id/orders/

        Returns a paginated response with a key of ``orders``, containing a list of :format:`order` against this event.



        
        """
        
        return self.get("/events/{0}/orders/".format(id), data=data)

    def get_events_attendees(self, id,  event_name_html=None, event_description_html=None, event_organizer_id=None, event_start_utc=None, event_start_timezone=None, event_end_utc=None, event_end_timezone=None, event_currency=None, event_venue_id=None, event_online_event=None, event_listed=None, event_logo_id=None, event_category_id=None, event_subcategory_id=None, event_format_id=None, event_shareable=None, event_invite_only=None, event_password=None, event_capacity=None, event_show_remaining=None, **data):
        """
        GET /events/:id/attendees/

        Returns a paginated response with a key of ``attendees``,
        containing a list of :format:`attendees <attendee>` at this event.


        :param string event.name.html: (optional) The name of the event
        :param string event.description.html: (optional) The description on the event page
        :param string event.organizer_id: (optional) The ID of the organizer of this event
        :param datetime event.start.utc: (optional) The start time of the event
        :param string event.start.timezone: (optional) Start time timezone (Olson format)
        :param datetime event.end.utc: (optional) The end time of the event
        :param string event.end.timezone: (optional) End time timezone (Olson format)
        :param string event.currency: (optional) Event currency (3 letter code)
        :param string event.venue_id: (optional) ID of the venue (this or online_event is required)
        :param boolean event.online_event: (optional) Is the event online-only (no venue)?
        :param boolean event.listed: (optional) If the event is publicly listed and searchable
        :param string event.logo.id: (optional) The logo for the event
        :param string event.category_id: (optional) The category (vertical) of the event
        :param string event.subcategory_id: (optional) The subcategory of the event (US only)
        :param string event.format_id: (optional) The format (general type) of the event
        :param boolean event.shareable: (optional) If users can share the event on social media
        :param boolean event.invite_only: (optional) Only invited users can see the event page
        :param string event.password: (optional) Password needed to see the event in unlisted mode
        :param integer event.capacity: (optional) Set specific capacity (if omitted, sums ticket capacities)
        :param boolean event.show_remaining: (optional) If the remaining number of tickets is publicly visible on the event page
        
        """
        
        return self.get("/events/{0}/attendees/".format(id), data=data)

    def get_events_discounts(self, id,  event_name_html=None, event_description_html=None, event_organizer_id=None, event_start_utc=None, event_start_timezone=None, event_end_utc=None, event_end_timezone=None, event_currency=None, event_venue_id=None, event_online_event=None, event_listed=None, event_logo_id=None, event_category_id=None, event_subcategory_id=None, event_format_id=None, event_shareable=None, event_invite_only=None, event_password=None, event_capacity=None, event_show_remaining=None, **data):
        """
        GET /events/:id/discounts/

        Returns a paginated response with a key of ``discounts``,
        containing a list of :format:`discounts <discount>` available on this event.


        :param string event.name.html: (optional) The name of the event
        :param string event.description.html: (optional) The description on the event page
        :param string event.organizer_id: (optional) The ID of the organizer of this event
        :param datetime event.start.utc: (optional) The start time of the event
        :param string event.start.timezone: (optional) Start time timezone (Olson format)
        :param datetime event.end.utc: (optional) The end time of the event
        :param string event.end.timezone: (optional) End time timezone (Olson format)
        :param string event.currency: (optional) Event currency (3 letter code)
        :param string event.venue_id: (optional) ID of the venue (this or online_event is required)
        :param boolean event.online_event: (optional) Is the event online-only (no venue)?
        :param boolean event.listed: (optional) If the event is publicly listed and searchable
        :param string event.logo.id: (optional) The logo for the event
        :param string event.category_id: (optional) The category (vertical) of the event
        :param string event.subcategory_id: (optional) The subcategory of the event (US only)
        :param string event.format_id: (optional) The format (general type) of the event
        :param boolean event.shareable: (optional) If users can share the event on social media
        :param boolean event.invite_only: (optional) Only invited users can see the event page
        :param string event.password: (optional) Password needed to see the event in unlisted mode
        :param integer event.capacity: (optional) Set specific capacity (if omitted, sums ticket capacities)
        :param boolean event.show_remaining: (optional) If the remaining number of tickets is publicly visible on the event page
        
        """
        
        return self.get("/events/{0}/discounts/".format(id), data=data)

    def post_events_discounts(self, id,  **data):
        """
        POST /events/:id/discounts/

        Creates a new discount; returns the result as a :format:`discount` as the
        key ``discount``.


        
        """
        
        return self.post("/events/{0}/discounts/".format(id), data=data)

    def get_events_discounts(self, id, discount_id,  **data):
        """
        GET /events/:id/discounts/:discount_id/

        Gets a :format:`discount` by ID as the key ``discount``.


        
        """
        
        return self.get("/events/{0}/discounts/{1}/".format(id,discount_id), data=data)

    def post_events_discounts(self, id, discount_id,  **data):
        """
        POST /events/:id/discounts/:discount_id/

        Updates a discount; returns the result as a :format:`discount` as the
        key ``discount``.


        
        """
        
        return self.post("/events/{0}/discounts/{1}/".format(id,discount_id), data=data)

    def get_events_access_codes(self, id,  **data):
        """
        GET /events/:id/access_codes/

        Returns a paginated response with a key of ``access_codes``,
        containing a list of :format:`access_codes <access_code>` available on this event.


        
        """
        
        return self.get("/events/{0}/access_codes/".format(id), data=data)

    def post_events_access_codes(self, id,  **data):
        """
        POST /events/:id/access_codes/

        Creates a new access code; returns the result as a :format:`access_code` as the
        key ``access_code``.


        
        """
        
        return self.post("/events/{0}/access_codes/".format(id), data=data)

    def get_events_access_codes(self, id, access_code_id,  **data):
        """
        GET /events/:id/access_codes/:access_code_id/

        Gets a :format:`access_code` by ID as the key ``access_code``.


        
        """
        
        return self.get("/events/{0}/access_codes/{1}/".format(id,access_code_id), data=data)

    def post_events_access_codes(self, id, access_code_id,  **data):
        """
        POST /events/:id/access_codes/:access_code_id/

        Updates an access code; returns the result as a :format:`access_code` as the
        key ``access_code``.


        
        """
        
        return self.post("/events/{0}/access_codes/{1}/".format(id,access_code_id), data=data)

    def get_events_transfers(self, id,  pos=None, **data):
        """
        GET /events/:id/transfers/



        Returns a list of :format:`transfers` for the event.

        :param string pos: (optional) Only return ticket classes valid for the given point of sale (Valid choices are: online, or at_the_door)
        
        """
        
        return self.get("/events/{0}/transfers/".format(id), data=data)

    def get_media_by_id(self, id,  **data):
        """
        GET /media/:id/

        Return an :format:`image` for a given id.

        .. _get-media-upload:


        
        """
        
        return self.get("/media/{0}/".format(id), data=data)

    def get_media_upload(self,  **data):
        """
        GET /media/upload/

        See :ref:`media-uploads`.
        .. _post-media-upload:


        
        """
        return self.get("/media/upload/", data=data)

    def post_media_upload(self,  **data):
        """
        POST /media/upload/



        See :ref:`media-uploads`.

        
        """
        return self.post("/media/upload/", data=data)

    def get_order_by_id(self, id,  **data):
        """
        GET /orders/:id/



        Gets an :format:`order` by ID as the key ``order``.

        
        """
        
        return self.get("/orders/{0}/".format(id), data=data)

    def post_organizers(self,  organizer_name, organizer_description_html=None, organizer_logo_id=None, **data):
        """
        POST /organizers/

        Makes a new organizer.
        Returns an :format:`organizer` as ``organizer``.
        :param str organizer.name: The name of the organizer.
        :param str description.html: The description of the organizer.
        :param str logo.id: The logo id of the organizer.


        :param string organizer.name:  The name of the organizer
        :param string organizer.description.html: (optional) The description of the organizer
        :param string organizer.logo.id: (optional) The logo id of the organizer
        
        """
        return self.post("/organizers/", data=data)

    def get_organizers_by_id(self, id,  organizer_name, organizer_description_html=None, organizer_logo_id=None, **data):
        """
        GET /organizers/:id/


        Gets an :format:`organizer` by ID as ``organizer``.


        :param string organizer.name:  The name of the organizer
        :param string organizer.description.html: (optional) The description of the organizer
        :param string organizer.logo.id: (optional) The logo id of the organizer
        
        """
        
        return self.get("/organizers/{0}/".format(id), data=data)

    def post_organizers_by_id(self, id,  **data):
        """
        POST /organizers/:id/




        Updates an :format:`organizer` and returns it as as ``organizer``.

        
        """
        
        return self.post("/organizers/{0}/".format(id), data=data)

    def get_system_timezones(self,  **data):
        """
        GET /system/timezones/


        Returns a paginated response with a key of ``timezones``,
        containing a list of :format:`timezones <timezone>`.


        
        """
        return self.get("/system/timezones/", data=data)

    def get_user_by_id(self, id,  **data):
        """
        GET /users/:id/

        Returns a :format:`user` for the specified user as ``user``. If you want
        to get details about the currently authenticated user, use ``/users/me/``.


        
        """
        
        return self.get("/users/{0}/".format(id), data=data)

    def get_users_orders(self, id,  **data):
        """
        GET /users/:id/orders/

        Returns a paginated response of :format:`orders <order>`, under
        the key ``orders``, of all orders the user has placed (i.e. where the user
        was the person buying the tickets).
        :param int id: The id assigned to a user.
        :param datetime changed_since: (optional) Only return attendees changed on or after the time given.
        .. note:: A datetime represented as a string in ISO8601 combined date and time format, always in UTC.


        
        """
        
        return self.get("/users/{0}/orders/".format(id), data=data)

    def get_users_owned_events(self, id,  **data):
        """
        GET /users/:id/owned_events/

        Returns a paginated response of :format:`events <event>`, under
        the key ``events``, of all events the user owns (i.e. events they are organising)


        
        """
        
        return self.get("/users/{0}/owned_events/".format(id), data=data)

    def get_users_owned_event_attendees(self, id,  changed_since=None, **data):
        """
        GET /users/:id/owned_event_attendees/

        Returns a paginated response of :format:`attendees <attendee>`, under
        the key ``attendees``, of attendees visiting any of the events the user owns
        (events that would be returned from ``/users/:id/owned_events/``)


        :param datetime changed_since: (optional) Only return attendees changed on or after the time given
        
        """
        
        return self.get("/users/{0}/owned_event_attendees/".format(id), data=data)

    def get_users_owned_event_orders(self, id,  changed_since=None, **data):
        """
        GET /users/:id/owned_event_orders/

        Returns a paginated response of :format:`orders <order>`, under
        the key ``orders``, of orders placed against any of the events the user owns
        (events that would be returned from ``/users/:id/owned_events/``)


        :param datetime changed_since: (optional) Only return attendees changed on or after the time given
        
        """
        
        return self.get("/users/{0}/owned_event_orders/".format(id), data=data)

    def get_users_contact_lists(self, id,  **data):
        """
        GET /users/:id/contact_lists/

        Returns a list of :format:`contact_list` that the user owns as the key
        ``contact_lists``.


        
        """
        
        return self.get("/users/{0}/contact_lists/".format(id), data=data)

    def post_users_contact_lists(self, id,  status=None, order_by=None, **data):
        """
        POST /users/:id/contact_lists/

        Makes a new :format:`contact_list` for the user and returns it as
        ``contact_list``.


        :param string status: (optional) Only return events with a specific status set (Valid choices are: all, draft, live, canceled, started, or ended)
        :param string order_by: (optional) How to order the results (Valid choices are: start_asc, start_desc, created_asc, or created_desc)
        
        """
        
        return self.post("/users/{0}/contact_lists/".format(id), data=data)

    def get_users_contact_lists(self, id, contact_list_id,  status=None, order_by=None, **data):
        """
        GET /users/:id/contact_lists/:contact_list_id/

        Gets a user's :format:`contact_list` by ID as ``contact_list``.


        :param string status: (optional) Only return events with a specific status set (Valid choices are: all, draft, live, canceled, started, or ended)
        :param string order_by: (optional) How to order the results (Valid choices are: start_asc, start_desc, created_asc, or created_desc)
        
        """
        
        return self.get("/users/{0}/contact_lists/{1}/".format(id,contact_list_id), data=data)

    def post_users_contact_lists(self, id, contact_list_id,  **data):
        """
        POST /users/:id/contact_lists/:contact_list_id/

        Updates the :format:`contact_list` and returns it as ``contact_list``.


        
        """
        
        return self.post("/users/{0}/contact_lists/{1}/".format(id,contact_list_id), data=data)

    def delete_users_contact_lists(self, id, contact_list_id,  status=None, changed_since=None, **data):
        """
        DELETE /users/:id/contact_lists/:contact_list_id/

        Deletes the contact list. Returns ``{"deleted": true}``.


        :param string status: (optional) Limits results to either confirmed attendees or cancelled/refunded/etc. attendees (Valid choices are: attending, or not_attending)
        :param datetime changed_since: (optional) Only return attendees changed on or after the time given
        
        """
        
        return self.delete("/users/{0}/contact_lists/{1}/".format(id,contact_list_id), data=data)

    def get_users_contact_lists_contacts(self, id, contact_list_id,  status=None, changed_since=None, **data):
        """
        GET /users/:id/contact_lists/:contact_list_id/contacts/

        Returns the :format:`contacts <contact>` on the contact list
        as ``contacts``.


        :param string status: (optional) Limits results to either confirmed attendees or cancelled/refunded/etc. attendees (Valid choices are: attending, or not_attending)
        :param datetime changed_since: (optional) Only return attendees changed on or after the time given
        
        """
        
        return self.get("/users/{0}/contact_lists/{1}/contacts/".format(id,contact_list_id), data=data)

    def post_users_contact_lists_contacts(self, id, contact_list_id,  **data):
        """
        POST /users/:id/contact_lists/:contact_list_id/contacts/

        Adds a new contact to the contact list. Returns ``{"created": true}``.
        There is no way to update entries in the list; just delete the old one
        and add the updated version.


        
        """
        
        return self.post("/users/{0}/contact_lists/{1}/contacts/".format(id,contact_list_id), data=data)

    def delete_users_contact_lists_contacts(self, id, contact_list_id,  status=None, changed_since=None, **data):
        """
        DELETE /users/:id/contact_lists/:contact_list_id/contacts/



        Deletes the specified contact from the contact list.
        Returns ``{"deleted": true}``.



        :param string status: (optional) Filter to active (attending) or inactive (not attending) orders (Valid choices are: active, or inactive)
        :param datetime changed_since: (optional) Only return orders changed on or after the time given
        
        """
        
        return self.delete("/users/{0}/contact_lists/{1}/contacts/".format(id,contact_list_id), data=data)

    def get_webhook_by_id(self, id,  **data):
        """
        GET /webhooks/:id/

        Returns a :format:`webhook` for the specified webhook as ``webhook``.


        
        """
        
        return self.get("/webhooks/{0}/".format(id), data=data)

    def delete_webhook_by_id(self, id,  **data):
        """
        DELETE /webhooks/:id/

        Deletes the specified :format:`webhook` object.


        
        """
        
        return self.delete("/webhooks/{0}/".format(id), data=data)

    def get_webhooks(self,  **data):
        """
        GET /webhooks/

        Returns the list of :format:`webhook` objects that belong to the authenticated user.


        
        """
        return self.get("/webhooks/", data=data)

    def post_webhooks(self,  **data):
        """
        POST /webhooks/



        Creates a :format:`webhook` object. The topic_patterns parameter accepts a comma-seperated value that can include any or all of the following:

        * ``event:{id}:*`` - Any changes to a specific event
        * ``event:{id}:order:*:placed`` - Any orders for the specified event.
        * ``user:me:event:*`` - Covers changes to any event.

        .. note:: {id} must be replaced with the correct Event ID.

        
        """
        return self.post("/webhooks/", data=data)